//
//  EditItemViewController.swift
//  Listko
//
//  Created by David Tomic on 02/03/2018.
//  Copyright (c) 2018 Terminko. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EditItemDisplayLogic: class
{
  func displayListItems(viewModel: EditItem.ShowListItems.ViewModel)
}

class EditItemViewController: UIViewController, EditItemDisplayLogic
{
  var interactor: EditItemBusinessLogic?
  var router: (NSObjectProtocol & EditItemRoutingLogic & EditItemDataPassing)?

  @IBOutlet weak var tableView: UITableView!
  @IBOutlet weak var consToolbarBottom: NSLayoutConstraint!
  
  var sections: [String] = []
  var displayItems = [String : [EditItem.ShowListItems.ViewModel.DisplayedListItem]]()
  
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    setupTableView()
    disableLargeTitle()
    self.tableView.isEditing = true
    createNewList()
    showListItems()
  }
  
  override func viewWillAppear(_ animated: Bool) {
    super.viewWillAppear(animated)
    setKeyboardNotifications()
  }
  
  override func viewWillDisappear(_ animated: Bool) {
    super.viewWillDisappear(animated)
    NotificationCenter.default.removeObserver(self)
  }
  
  private func disableLargeTitle() {
    if #available(iOS 11.0, *) {
      navigationItem.largeTitleDisplayMode = .never
    }
  }
  
  private func setKeyboardNotifications() {
    NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillDisappear(_:)),
                                           name: Notification.Name.UIKeyboardWillHide, object: nil)
    NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillAppear(_:)),
                                           name: Notification.Name.UIKeyboardWillShow, object: nil)
  }
  
  @objc func keyboardWillAppear(_ notification: NSNotification) {
    moveToolbar(notification: notification)
  }
  
  @objc func keyboardWillDisappear(_ notification: NSNotification) {
    removeTableViewFooter()
    
    let info = notification.userInfo!
    let duration = info[UIKeyboardAnimationDurationUserInfoKey] as! Double
    
    UIView.animate(withDuration: duration) {
      self.consToolbarBottom.constant = 0
      self.view.layoutIfNeeded()
    }
  }
  
  private func moveToolbar(notification: NSNotification) {
    let info = notification.userInfo!
    let keyboardFrame: CGRect = (info[UIKeyboardFrameEndUserInfoKey] as! NSValue).cgRectValue
    let duration = info[UIKeyboardAnimationDurationUserInfoKey] as! Double

    let toolbarHeight: CGFloat = 50
    let padding: CGFloat = 50
    addTableViewFooter(height: keyboardFrame.size.height + toolbarHeight + padding)
    
    UIView.animate(withDuration: duration) {
      self.consToolbarBottom.constant = keyboardFrame.size.height
      self.view.layoutIfNeeded()
    }
  }
  
  func showListItems()
  {
    let request = EditItem.ShowListItems.Request()
    interactor?.showListItems(request: request)
  }
  
  func createNewList() {
    sections.append("Ostalo")
    sections.append("Ostalo")
    let initListItem = EditItem.ShowListItems.ViewModel.DisplayedListItem(name: "")
    displayItems[sections[0]] = [initListItem, initListItem]
    displayItems[sections[1]] = [initListItem, initListItem]
    tableView.reloadData()
  }
  
  func displayListItems(viewModel: EditItem.ShowListItems.ViewModel)
  {
    
  }
}
