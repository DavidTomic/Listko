//
//  EditGroceryInteractorTests.swift
//  Listko
//
//  Created by David Tomic on 15/03/2018.
//  Copyright (c) 2018 Terminko. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Listko_dev
import XCTest
import RealmSwift

class EditGroceryInteractorTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: EditGroceryInteractor!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    setupEditGroceryInteractor()
  }
  
  override func tearDown()
  {
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupEditGroceryInteractor()
  {
    sut = EditGroceryInteractor()
  }
  
  // MARK: Test doubles
  
  class EditGroceryPresentationLogicSpy: EditGroceryPresentationLogic
  {
    var presentGroceryListToEditCalled = false
    
    func presentGroceryListToEdit(response: EditGrocery.Edit.Response)
    {
      presentGroceryListToEditCalled = true
    }
  }
  
  // MARK: Test Edit Grocery
  
  func testShowGroceryListToEdit_ShouldCreateNewGroceryList_AndPresenterToFormatIt()
  {
    // Given
    let spy = EditGroceryPresentationLogicSpy()
    sut.presenter = spy

    // When
    let request = EditGrocery.Edit.Request()
    sut.showGroceryListToEdit(request: request)

    // Then
    XCTAssertNotNil(sut.groceryList, "showGroceryListToEdit() should create new Grocery List")
    XCTAssertTrue(spy.presentGroceryListToEditCalled, "showGroceryListToEdit() should ask the presenter to format new Grocery List")
  }
  
  func testShowGroceryListToEdit_ShouldAskPresenterToFormatIt_IfGroceryListExists()
  {
    // Given
    let spy = EditGroceryPresentationLogicSpy()
    sut.presenter = spy
    sut.groceryList = GroceryList()
    
    // When
    let request = EditGrocery.Edit.Request()
    sut.showGroceryListToEdit(request: request)
    
    // Then
    XCTAssertTrue(spy.presentGroceryListToEditCalled, "showGroceryListToEdit() should ask the presenter to format exist Grocery List")
  }
  
  func testShowGroceryListToEdit_ContainDefaultListCategory()
  {
    // Given
    let spy = EditGroceryPresentationLogicSpy()
    sut.presenter = spy

    // When
    let request = EditGrocery.Edit.Request()
    sut.showGroceryListToEdit(request: request)

    // Then
    XCTAssertEqual(sut.groceryList?.listCategories.count, 1, "Grocery List should have default List Category")
  }
  
  func testShowGroceryListToEdit_ContainOneListItem_InDefaultListCategory()
  {
    // Given
    let spy = EditGroceryPresentationLogicSpy()
    sut.presenter = spy

    // When
    let request = EditGrocery.Edit.Request()
    sut.showGroceryListToEdit(request: request)

    // Then
    XCTAssertEqual(sut.groceryList?.listCategories.first?.listItems.count, 1, "default list category should have one list item")
  }
  
}
